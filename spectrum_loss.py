# spectrum_loss.py

import math
from polarization_loss import get_polarization_loss

def dbm_to_mw(p_dbm):
    return 10 ** (p_dbm / 10)

def mw_to_dbm(p_mw):
    return 10 * math.log10(p_mw)

def adjust_tx_gain_by_frequency(tx, rx):
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É—Å–∏–ª–µ–Ω–∏–µ –∞–Ω—Ç–µ–Ω–Ω—ã –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞, –µ—Å–ª–∏ —á–∞—Å—Ç–æ—Ç–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–±–æ—á–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω.
    –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É gain_max –∏ gain_oob –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç.
    """
    f = rx['frequency_mhz']
    f_min = tx.get('freq_min')
    f_max = tx.get('freq_max')
    gain_max = tx.get('gain_max', 0)
    gain_oob = tx.get('gain_oob', -30)

    if not all([f, f_min, f_max]):
        return gain_max  # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    f_center = (f_min + f_max) / 2
    abs_ratio = max(f / f_center, f_center / f)

    # –í—ã–±–æ—Ä –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ a –∏ b –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–∏–ª–µ–Ω–∏—è
    if gain_max < 6.01:
        a, b = 1.2, 2.0
    elif gain_max < 15.01:
        a, b = 1.15, 1.75
    else:
        a, b = 1.1, 1.5

    if abs_ratio <= a:
        return gain_max
    elif abs_ratio >= b:
        return gain_oob
    else:
        alpha = (abs_ratio - a) / (b - a)
        return gain_max * (1 - alpha) + gain_oob * alpha



def check_blocking_interference(tx, rx, d_km, gt, gr):
    freq_offset = abs(tx['frequency_mhz'] - rx['frequency_mhz'])

    freq_threshold = rx.get('Freq_offset_block', None)
    block_rej = rx.get('Block_Rej', None)
    sensitivity = rx.get('sensitivity_dbm', None)

    if freq_threshold is None or block_rej is None or sensitivity is None:
        return None  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö

    if freq_offset > freq_threshold:
        return None  # –í–Ω–µ –∑–æ–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

    fspl = 20 * math.log10(d_km) + 20 * math.log10(tx['frequency_mhz']) + 32.44
    polar_loss = get_polarization_loss(tx.get('polarization'), rx.get('polarization'))

    Pblock = tx['power_dbm'] + gt + gr - tx['loss'] - rx['loss'] - fspl - polar_loss
    threshold = sensitivity + block_rej
    result = {
        'Pblock': Pblock,
        'threshold': threshold,
        'passed': Pblock <= threshold,
        'freq_offset': freq_offset,
        'limit': freq_threshold
    }
    return result

def compute_interference_level(tx: dict, rx: dict, distance_km: float, gt: float, gr: float) -> float:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–º–µ—Ö–∏ –æ—Ç –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞ tx –Ω–∞ –ø—Ä–∏—ë–º–Ω–∏–∫ rx,
    —Å —É—á—ë—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É—Å–∏–ª–µ–Ω–∏–π gt –∏ gr.

    :param tx: —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞ (EN_dBm, BW_khz, freq_mhz –∏ –¥—Ä.)
    :param rx: —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏—ë–º–Ω–∏–∫–∞ (ACS, BW_khz, freq_mhz –∏ –¥—Ä.)
    :param distance_km: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∞–Ω—Ç–µ–Ω–Ω–∞–º–∏ –≤ –∫–º
    :param gt: —É—Å–∏–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—é—â–µ–π –∞–Ω—Ç–µ–Ω–Ω—ã –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –Ω–∞ –ø—Ä–∏—ë–º–Ω–∏–∫ (–¥–ë–∏)
    :param gr: —É—Å–∏–ª–µ–Ω–∏–µ –ø—Ä–∏—ë–º–Ω–æ–π –∞–Ω—Ç–µ–Ω–Ω—ã –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –Ω–∞ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫ (–¥–ë–∏)
    :return: —É—Ä–æ–≤–µ–Ω—å –ø–æ–º–µ—Ö–∏ –≤ –¥–ë–º
    """

    fspl_tx = 20 * math.log10(distance_km) + 20 * math.log10(tx['frequency_mhz']) + 32.44
    fspl_rx = 20 * math.log10(distance_km) + 20 * math.log10(rx['frequency_mhz']) + 32.44
    polar_loss = get_polarization_loss(tx.get('polarization', ''), rx.get('polarization', ''))


    delta_f = abs(tx['frequency_mhz'] - rx['frequency_mhz'])  # –ú–ì—Ü
    delta_bw = 1.5 * (tx['BW_khz'] + rx['BW_khz']) / 1000  # –ú–ì—Ü

    if delta_f >= delta_bw:

        en_rule = tx.get('EN_dBm_rule')
        if en_rule:
            EN_rx = en_rule['below_limit'] if rx['frequency_mhz'] <= en_rule['freq_limit_mhz'] else en_rule[
                'above_limit']
        else:
            EN_rx = tx.get('EN_dBm', -40)

        # --- –î–ª—è Pint3 –º–æ–∂–Ω–æ –≤–∑—è—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –∫–∞–∫ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å ---
        freq_avg = (tx['frequency_mhz'] + rx['frequency_mhz']) / 2
        if en_rule:
            EN_avg = en_rule['below_limit'] if freq_avg <= en_rule['freq_limit_mhz'] else en_rule['above_limit']
        else:
            EN_avg = tx.get('EN_dBm', -40)

        # –í–Ω–µ–ø–æ–ª–æ—Å–Ω–∞—è –ø–æ–º–µ—Ö–∞
        Pint1 = tx['power_dbm'] + gt + gr - tx['loss'] - rx['loss'] - fspl_tx - rx.get('ACS', 0)
        Pint2 = EN_rx + gt + gr - tx['loss'] - rx['loss'] - fspl_rx
        Pint3 = EN_avg + gt + gr - tx['loss'] - rx['loss'] - (fspl_tx + fspl_rx) / 2 - rx.get('ACS', 0)

        Psum_mw = dbm_to_mw(Pint1) + dbm_to_mw(Pint2) + dbm_to_mw(Pint3)
        Psum = mw_to_dbm(Psum_mw) - polar_loss

        print("üìâ –ü–æ–ª–æ—Å—ã –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç—Å—è ‚Üí –≤–Ω–µ–ø–æ–ª–æ—Å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—á—Ç–µ–Ω—ã:")
        print(f"  ‚àÜf = {delta_f:.3f} –ú–ì—Ü, ‚àÜBW = {delta_bw:.3f} –ú–ì—Ü")
        print(f"  Pint1 = {Pint1:.2f} –¥–ë–º, Pint2 = {Pint2:.2f} –¥–ë–º, Pint3 = {Pint3:.2f} –¥–ë–º")
        print(f"  –°—É–º–º–∞—Ä–Ω–∞—è –ø–æ–º–µ—Ö–∞: {Psum:.2f} –¥–ë–º")
    else:
        # –ü—Ä—è–º–æ–µ –Ω–∞–ª–æ–∂–µ–Ω–∏–µ
        Psum = tx['power_dbm'] + gt + gr - tx['loss'] - rx['loss'] - fspl_tx - polar_loss
        print("‚ö†Ô∏è –ü–æ–ª–æ—Å—ã –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç—Å—è ‚Üí –ø—Ä—è–º–∞—è –º–æ—â–Ω–∞—è –ø–æ–º–µ—Ö–∞:")
        print(f"  ‚àÜf = {delta_f:.3f} –ú–ì—Ü, ‚àÜBW = {delta_bw:.3f} –ú–ì—Ü")
        print(f"  –°—É–º–º–∞—Ä–Ω–∞—è –ø–æ–º–µ—Ö–∞: {Psum:.2f} –¥–ë–º")

    return Psum

def check_field_induced_interference(tx, rx, d_km, gt):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–º–µ—Ö–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –ø—Ä–∏—ë–º–Ω—É—é –∞–Ω—Ç–µ–Ω–Ω—É
    """
    c = 3e8  # —Å–∫–æ—Ä–æ—Å—Ç—å —Å–≤–µ—Ç–∞, –º/—Å
    freq_hz = tx['frequency_mhz'] * 1e6
    lambda_m = c / freq_hz
    distance_m = d_km

    gain_tx = tx.get('gain_max', 0)
    if gain_tx < 9.01:
        limit = 1 * lambda_m
    elif gain_tx < 18.01:
        limit = 3 * lambda_m
    else:
        limit = 10 * lambda_m

    if distance_m > limit:
        return {
            'considered': False,
            'distance': distance_m,
            'lambda': lambda_m,
            'distance_limit': limit
        }

    # –†–∞—Å—á—ë—Ç –º–æ—â–Ω–æ—Å—Ç–∏ –Ω–∞–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    Ptx_mw = dbm_to_mw(tx['power_dbm'] - tx['loss'] + gt)
    E = math.sqrt(30 * Ptx_mw) / distance_m  # –í/–º
    A_eff = (lambda_m ** 2) / (4 * math.pi)
    Pinduced_mw = (E ** 2) * A_eff / 377
    Pinduced_dbm = mw_to_dbm(Pinduced_mw)

    return {
        'considered': True,
        'distance': distance_m,
        'lambda': lambda_m,
        'Pinduced_dbm': Pinduced_dbm,
        'threshold_dbm': -10,
        'passed': Pinduced_dbm < -10,
        'distance_limit': limit
    }
