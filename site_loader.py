# site_loader.py

import pandas as pd
from antenna_utils import load_antenna_pattern_with_info
import sys

def process_unit(unit, device_file, antenna_file, index=None, role='tx'):
    import sys

    device_name = unit.get('device_name', '').strip()
    prefix = f"{role.upper()} #{index+1}" if index is not None else role.upper()

    # === –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ===
    df = pd.read_excel(device_file, header=None)
    headers = df.iloc[0].dropna().astype(str).str.strip().tolist()

    if device_name not in headers:
        print(f"\nüìõ –û—à–∏–±–∫–∞: {prefix} ‚Äî –ø—Ä–∏—Å—Ç—Ä—ñ–π '{device_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ DeviceDB.xlsx", file=sys.stderr)
        print(f"üîé –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –ø—Ä–∏—Å—Ç—Ä–æ—é –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Å–∞–π—Ç–∞.", file=sys.stderr)
        sys.exit(1)

    device_col = df.columns[df.iloc[0].astype(str).str.strip() == device_name][0]
    param_col = df.columns[0]
    device_params = df[[param_col, device_col]].dropna().iloc[1:]
    param_dict = dict(zip(device_params.iloc[:, 0].astype(str).str.strip(), device_params.iloc[:, 1]))

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –∏ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π ===
    prefix = f"{role.upper()} #{index+1}" if index is not None else role.upper()

    def validate(value, key_min, key_max, label):
        min_val = param_dict.get(key_min, value)
        max_val = param_dict.get(key_max, value)
        if not (min_val <= value <= max_val):
            raise ValueError(
                f"‚ùå {prefix}: {label} = {value} –ø–æ–∑–∞ –¥–æ–ø—É—Å—Ç–∏–º–∏–º –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º [{min_val}, {max_val}]"
            )
        return value

    def validate_choice(value, allowed_values, label):
        if value not in allowed_values:
            raise ValueError(
                f"‚ùå {prefix}: {label} = {value} –Ω–µ –≤—Ö–æ–¥–∏—Ç—å —É –¥–æ–ø—É—Å—Ç–∏–º—ñ –∑–Ω–∞—á–µ–Ω–Ω—è: {allowed_values}"
            )
        return value

    # === –†–æ–ª—å TX –∏–ª–∏ RX ===
    if role == 'tx':
        unit['power_dbm'] = validate(unit.get('power_dbm', param_dict.get('TX Power Default (dBm)', 30)),
                                     'TX Power Min (dBm)', 'TX Power Max (dBm)', '–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–¥–∞–≤–∞—á–∞')
    if role == 'rx':
        if 'RX Sensitivity Default  (dBm)' in param_dict:
            unit['sensitivity_dbm'] = validate(
                unit.get('sensitivity_dbm', param_dict['RX Sensitivity Default  (dBm)']),
                'RX Sensitivity Min  (dBm)', 'RX Sensitivity Max  (dBm)', '–ß—É—Ç–ª–∏–≤—ñ—Å—Ç—å –ø—Ä–∏–π–º–∞—á–∞')

    # === –ß–∞—Å—Ç–æ—Ç–∞ ===
    unit['frequency_mhz'] = validate(unit.get('frequency_mhz', param_dict.get('TX Frequency Default (MHz)', 150)),
                                     'Freq Min (MHz)', 'Freq Max (MHz)', '–ß–∞—Å—Ç–æ—Ç–∞')

    # === –®–∏—Ä–∏–Ω–∞ –ø–æ–ª–æ—Å—ã ===
    bw_opts = param_dict.get('BW Options (kHz)', '12.5')
    try:
        allowed_bw = [float(b.strip()) for b in str(bw_opts).split(',')]
    except Exception:
        allowed_bw = [12.5]  # fallback
    unit['BW_khz'] = validate_choice(unit.get('BW_khz', allowed_bw[0]), allowed_bw, '–®–∏—Ä–∏–Ω–∞ —Å–º—É–≥–∏ (BW_khz)')

    # === –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ===
    # === –£—Ä–æ–≤–µ–Ω—å –∏–∑–ª—É—á–µ–Ω–∏—è –≤–Ω–µ –ø–æ–ª–æ—Å—ã (EN_dBm) ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è TX
    if role == 'tx' and 'EN_dBm' not in unit and \
            'EN Freq Limit (MHz)' in param_dict and \
            'EN Below Limit (dBm)' in param_dict and \
            'EN Above Limit (dBm)' in param_dict:
        freq_limit = float(param_dict['EN Freq Limit (MHz)'])
        en_below = float(param_dict['EN Below Limit (dBm)'])
        en_above = float(param_dict['EN Above Limit (dBm)'])

        unit['EN_dBm_rule'] = {
            'freq_limit_mhz': freq_limit,
            'below_limit': en_below,
            'above_limit': en_above
        }

    if role == 'rx' and 'ACS' not in unit and 'RX ACS (dB)' in param_dict:
        unit['ACS'] = param_dict['RX ACS (dB)']
        # === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–ª–æ–∫–∏—Ä—É—é—â–µ–π –ø–æ–º–µ—Ö–∏ ===
        if 'RX Freq_offset_block (MHz)' in param_dict:
            unit['Freq_offset_block'] = float(param_dict['RX Freq_offset_block (MHz)'])
        if 'RX Block_Rej (dB)' in param_dict:
            unit['Block_Rej'] = float(param_dict['RX Block_Rej (dB)'])
    # === –ê–Ω—Ç–µ–Ω–Ω–∞ ===
    ant_name = unit.get('antenna_name', '').strip()
    try:
        hor, vert, ant_info = load_antenna_pattern_with_info(antenna_file, ant_name)
    except Exception:
        print(f"\nüìõ –ü–æ–º–∏–ª–∫–∞: {prefix} ‚Äî –∞–Ω—Ç–µ–Ω–∞ '{ant_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑—ñ AntennaDN.xlsx", file=sys.stderr)
        print(f"üîé –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –∞–Ω—Ç–µ–Ω–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü—ñ—ó —Å–∞–π—Ç–∞.", file=sys.stderr)
        sys.exit(1)

    unit['gain_max'] = ant_info.get('Max Gain (dBi)', 0)
    unit['polarization'] = ant_info.get('Polarisation', '–≤–µ—Ä—Ç–∏–∫')
    unit['freq_min'] = ant_info.get('Freq Min (MHz)', 0)
    unit['freq_max'] = ant_info.get('Freq Max (MHz)', 0)
    unit['gain_oob'] = ant_info.get('Gain OOB (dBi)', -20)

    return unit

def process_site(site, device_file, antenna_file):
    site['tx_list'] = [process_unit(tx, device_file, antenna_file, index=i, role='tx') for i, tx in enumerate(site.get('tx_list', []))]
    site['rx_list'] = [process_unit(rx, device_file, antenna_file, index=i, role='rx') for i, rx in enumerate(site.get('rx_list', []))]
    return site
