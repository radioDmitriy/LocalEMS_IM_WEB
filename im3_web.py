
from im3_analyzer import analyze_im3_candidates
from site_loader import process_unit
import pandas as pd
from antenna_utils import load_antenna_pattern, plot_antenna_patterns
import streamlit as st
import os
from fpdf import FPDF
import base64
import tempfile

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö ===
def load_device_names_from_columns(filename, sheet_name=0):
    df = pd.read_excel(filename, sheet_name=sheet_name, header=0)
    return list(df.columns[1:])

def load_antenna_sheet_names(filename):
    xls = pd.ExcelFile(filename)
    return xls.sheet_names

DEVICE_NAMES = load_device_names_from_columns("DeviceDB.xlsx")
ANTENNA_NAMES = load_antenna_sheet_names("AntennaDN.xlsx")

st.title("–ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –≤–ø–ª–∏–≤—É —ñ–Ω—Ç–µ—Ä–º–æ–¥—É–ª—è—Ü—ñ—ó (–Ü–ú)")

if "tx_list" not in st.session_state:
    st.session_state.tx_list = []

st.sidebar.subheader("‚ûï –î–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—á")
if st.sidebar.button("–î–æ–¥–∞—Ç–∏ TX"):
    st.session_state.tx_list.append({})

if "rx" not in st.session_state:
    st.session_state.rx = {}
if "expanded_rx" not in st.session_state:
    st.session_state.expanded_rx = False

st.subheader("üì° –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–≤–∞—á—ñ–≤")
tx_list = st.session_state.tx_list
for i, tx in enumerate(tx_list):
    with st.expander(f"üì° –ü–µ—Ä–µ–¥–∞–≤–∞—á #{i+1}", expanded=False):
        tx['device_name'] = st.selectbox(f"üìª –ü—Ä–∏—Å—Ç—Ä—ñ–π TX #{i+1}", DEVICE_NAMES, index=DEVICE_NAMES.index(tx.get("device_name", DEVICE_NAMES[0])), key=f"device_name_tx_{i}")
        tx['antenna_name'] = st.selectbox(f"üì° –ê–Ω—Ç–µ–Ω–∞ TX #{i+1}", ANTENNA_NAMES, index=ANTENNA_NAMES.index(tx.get("antenna_name", ANTENNA_NAMES[0])), key=f"antenna_tx_{i}")
        tx['power_dbm'] = st.number_input(f"üîå –ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å TX #{i+1} (–¥–ë–º)", value=tx.get("power_dbm", 44), key=f"power_tx_{i}")
        tx['frequency_mhz'] = st.number_input(f"üì∂ –ß–∞—Å—Ç–æ—Ç–∞ TX #{i+1} (–ú–ì—Ü)", value=tx.get("frequency_mhz", 160), key=f"freq_tx_{i}")
        tx['BW_khz'] = st.number_input(f"üìè –®–∏—Ä–∏–Ω–∞ —Å–º—É–≥–∏ TX #{i + 1} (–∫–ì—Ü)", value=tx.get("BW_khz", 12.5), step=0.1, key=f"bw_tx_{i}")
        tx['azimuth'] = st.number_input(f"üß≠ –ê–∑–∏–º—É—Ç TX #{i+1} (¬∞)", value=tx.get("azimuth", 0), key=f"azimuth_tx_{i}")
        tx['elevation'] = st.number_input(f"üéØ –ö—É—Ç –º—ñ—Å—Ü—è TX #{i+1} (¬∞)", value=tx.get("elevation", 0), key=f"elevation_tx_{i}")
        tx['coords'] = (
            st.number_input(f"üìç X TX #{i+1} (–º)", value=tx.get("coords", (0, 0, 20))[0], key=f"x_tx_{i}"),
            st.number_input(f"üìç Y TX #{i+1} (–º)", value=tx.get("coords", (0, 0, 20))[1], key=f"y_tx_{i}"),
            st.number_input(f"üìç Z TX #{i+1} (–º)", value=tx.get("coords", (0, 0, 20))[2], key=f"z_tx_{i}")
        )
        tx['loss'] = st.number_input(f"üìâ –í—Ç—Ä–∞—Ç–∏ TX #{i+1} (–¥–ë)", value=tx.get("loss", 2), key=f"loss_tx_{i}")

        try:
            process_unit(tx, "DeviceDB.xlsx", "AntennaDN.xlsx", index=i, role="tx")
            st.success("‚úÖ –ü–µ—Ä–µ–¥–∞–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤.")
        except ValueError as e:
            st.error(str(e))

st.subheader("üì° –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏–π–º–∞—á–∞")
rx = st.session_state.rx
with st.expander("üì° –ü—Ä–∏–π–º–∞—á", expanded=st.session_state.expanded_rx):
    rx['device_name'] = st.selectbox("üìª –ü—Ä–∏—Å—Ç—Ä—ñ–π RX", options=DEVICE_NAMES, index=DEVICE_NAMES.index(rx.get("device_name", DEVICE_NAMES[0])), key="device_name_rx")
    rx['antenna_name'] = st.selectbox("üì° –ê–Ω—Ç–µ–Ω–∞ RX", options=ANTENNA_NAMES, index=ANTENNA_NAMES.index(rx.get("antenna_name", ANTENNA_NAMES[0])), key="antenna_rx")
    rx['frequency_mhz'] = st.number_input("üì∂ –ß–∞—Å—Ç–æ—Ç–∞ RX (–ú–ì—Ü)", value=rx.get("frequency_mhz", 150), key="freq_rx")
    rx['BW_khz'] = st.number_input("üìè –®–∏—Ä–∏–Ω–∞ —Å–º—É–≥–∏ RX (–∫–ì—Ü)", value=rx.get("BW_khz", 12.5), step=0.1, key="bw_rx")
    rx['azimuth'] = st.number_input("üß≠ –ê–∑–∏–º—É—Ç RX (¬∞)", value=rx.get("azimuth", 0), key="azimuth_rx")
    rx['elevation'] = st.number_input("üéØ –ö—É—Ç –º—ñ—Å—Ü—è RX (¬∞)", value=rx.get("elevation", 0), key="elevation_rx")
    rx['coords'] = (
        st.number_input("üìç X RX (–º)", value=rx.get("coords", (0, 0, 25))[0], key="x_rx"),
        st.number_input("üìç Y RX (–º)", value=rx.get("coords", (0, 0, 25))[1], key="y_rx"),
        st.number_input("üìç Z RX (–º)", value=rx.get("coords", (0, 0, 25))[2], key="z_rx")
    )
    rx['loss'] = st.number_input("üìâ –í—Ç—Ä–∞—Ç–∏ RX (–¥–ë)", value=rx.get("loss", 2), key="loss_rx")
    rx['sensitivity_dbm'] = st.number_input("üéöÔ∏è –ß—É—Ç–ª–∏–≤—ñ—Å—Ç—å RX (–¥–ë–º)", value=rx.get("sensitivity_dbm", -117), key="sens_rx")

    try:
        process_unit(rx, "DeviceDB.xlsx", "AntennaDN.xlsx", index=0, role="rx")
        st.success("‚úÖ –ü—Ä–∏–π–º–∞—á —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤.")
    except ValueError as e:
        st.error(str(e))

st.markdown("---")
st.subheader("üì° –ü–æ–±—É–¥–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ—Å—Ç—ñ –∞–Ω—Ç–µ–Ω")

antenna_to_plot = st.selectbox("üìÅ –í–∏–±–µ—Ä—ñ—Ç—å –∞–Ω—Ç–µ–Ω—É –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –î–ù", ANTENNA_NAMES)

if st.button("üìà –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –î–ù"):
    try:
        hor_df, vert_df = load_antenna_pattern("AntennaDN.xlsx", sheet_name=antenna_to_plot)
        fig = plot_antenna_patterns(hor_df, vert_df, sheet_name=antenna_to_plot)
        st.pyplot(fig)  # –¢–µ–ø–µ—Ä —Ü–µ –±–µ–∑–ø–µ—á–Ω–∏–π —ñ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–∫–ª–∏–∫
    except Exception as e:
        st.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–±—É–¥—É–≤–∞—Ç–∏ –î–ù: {e}")


# === –ê–Ω–∞–ª—ñ–∑ ===
st.markdown("---")

if st.button("‚ñ∂Ô∏è –í–∏–∫–æ–Ω–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑ IM"):
    st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç–∏")
    result = analyze_im3_candidates({"tx_list": tx_list, "rx_list": [rx]}, tx_ids=list(range(len(tx_list))), rx_id=0, show_levels=True, use_markdown=True)
    st.markdown(result.replace("\n", "<br>"), unsafe_allow_html=True)

    st.session_state.report_text = result

# === Collect TX/RX info in English ===
def format_tx_info(tx_list):
    lines = []
    for i, tx in enumerate(tx_list):
        lines.append(f"Transmitter #{i+1}:")
        lines.append(f"  Device: {tx.get('device_name', '')}")
        lines.append(f"  Antenna: {tx.get('antenna_name', '')}")
        lines.append(f"  Power: {tx.get('power_dbm', '')} dBm")
        lines.append(f"  Frequency: {tx.get('frequency_mhz', '')} MHz")
        lines.append(f"  Bandwidth: {tx.get('BW_khz', '')} kHz")
        lines.append(f"  Azimuth: {tx.get('azimuth', '')} ¬∞")
        lines.append(f"  Elevation: {tx.get('elevation', '')} ¬∞")
        x, y, z = tx.get('coords', (0, 0, 0))
        lines.append(f"  Coordinates: X={x}, Y={y}, Z={z} m")
        lines.append(f"  Cable loss: {tx.get('loss', '')} dB\n")
    return "\n".join(lines)

def format_rx_info(rx):
    lines = []
    lines.append("Receiver:")
    lines.append(f"  Device: {rx.get('device_name', '')}")
    lines.append(f"  Antenna: {rx.get('antenna_name', '')}")
    lines.append(f"  Frequency: {rx.get('frequency_mhz', '')} MHz")
    lines.append(f"  Bandwidth: {rx.get('BW_khz', '')} kHz")
    lines.append(f"  Azimuth: {rx.get('azimuth', '')} ¬∞")
    lines.append(f"  Elevation: {rx.get('elevation', '')} ¬∞")
    x, y, z = rx.get('coords', (0, 0, 0))
    lines.append(f"  Coordinates: X={x}, Y={y}, Z={z} m")
    lines.append(f"  Cable loss: {rx.get('loss', '')} dB")
    lines.append(f"  Sensitivity: {rx.get('sensitivity_dbm', '')} dBm\n")
    return "\n".join(lines)

# === Save PDF Report ===
if 'report_text' in st.session_state and 'tx_list' in st.session_state and 'rx' in st.session_state:
    if st.button("üíæ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–≤—ñ—Ç –≤ PDF"):
        try:
            pdf = FPDF()
            pdf.add_page()

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –æ–±—ã—á–Ω—ã–π (–Ω–µ–∂–∏—Ä–Ω—ã–π)
            pdf.set_font("Arial", "", 10)  # –≤—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä "" ‚Äî –æ–±—ã—á–Ω—ã–π —Å—Ç–∏–ª—å, –±–µ–∑ –∂–∏—Ä–Ω–æ—Å—Ç–∏
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á—ë—Ä–Ω—ã–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
            pdf.set_text_color(0, 0, 0)

            intro = "Intermodulation Interference Analysis Module - LocalEMS\nAuthor: dikatama.dm@mail.com\n\n"
            tx_info = format_tx_info(st.session_state.tx_list)
            rx_info = format_rx_info(st.session_state.rx)
            analysis = st.session_state.report_text.encode("ascii", errors="ignore").decode("ascii")

            full_text = intro + tx_info + "\n" + rx_info + "\n" + analysis
            pdf.multi_cell(0, 6, full_text)

            temp_pdf_path = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf").name
            pdf.output(temp_pdf_path)

            with open(temp_pdf_path, "rb") as f:
                b64_pdf = base64.b64encode(f.read()).decode("utf-8")
            os.remove(temp_pdf_path)

            href = f'<a href="data:application/pdf;base64,{b64_pdf}" download="IM3_report_full.pdf">üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–≤—ñ—Ç –≤ PDF</a>'
            st.markdown(href, unsafe_allow_html=True)
        except Exception as e:
            st.error(f"Error creating PDF: {e}")
